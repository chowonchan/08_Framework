[Ajax] - Asynchronous JavaScript and XML의 약자

    - JavaScript를 이용하여 비동기식으로 클라이언트와 서버가 ** 데이터(XML)를
    주고받는(통신) 방식

  -[동기식 데이터 통신]
    클라이언트가 서버로 데이터를 요청하면 응답이 올 때 까지 다른 작업은 대기

  -[비동기식 데이터 통신]
    클라이언트가 서버로 데이터 요청 후 응답을 기다리지 않고 다른 작업 수행 가능.
    추후 요청에 대한 응답이 오면 응답에 관련된 작업을 진행. 
      - 대기 하지않고 다른 작업 수행

  {특징}
    - 전체 페이지를 갱신하지 않고 일부분만 업데이트 가능
    - 사용자에게 즉각적인 반응과 풍부한 UI 경험을 제공 가능
    - ActiveX나 플러그인 프로그램 설치 없이 이용 가능
    - JavaScript 방식, jQuery 방식으로 구현 가능

  {단점}
    - Ajax는 JavaScript이므로 브라우저에 따른 크로스 브라우저 처리가 필요함
    - 오픈 소스로 차별화가 어려움
    - 연속적인 데이터 요청 시 서버 부하 증가하여 페이지가 느려짐
    - 페이지 내 복잡도가 증가하여 에러 발생 시 디버깅이 어려움



[JSON] - JavaScript Object Notation (자바스크립트 객체 표현법)

    - 간단한 포맷
    ▪ 괄호 {} 내에 key : value 쌍으로 구성 → { “key” : value }
    ▪ key → 반드시 문자열 사용 (쌍 따옴표(“”) 표기 필수)
    ▪ value → String, Number, Boolean, Array, Object, null 데이터 저장 가능
    (단, char 데이터는 저장 불가)

    - 객체{} 또는 배열[] 데이터를 효율적으로 표시 가능


  {특징}
    - Ajax 통신에서 Object 타입의 데이터 전송 시 XML 대비 용량이 작고 속도가 빠름
    → 경량 데이터 교환 방식

    - 간단한 포맷을 가지고 있어 이해하기 쉬움

    - 순수 TEXT 기반
    ▪ 구조화된 TEXT 형식
    ▪ 대부분의 프로그래밍 언어에서 JSON 포맷 데이터를 핸들링 할 수 있는
    라이브러리를 제공 → 시스템간 객체 교환에 용이


  {HTTP 응답 상태 코드}

  200 : 응답 성공 ( 200 번대가 성공의 의미)

  -{오류}
  400 : 잘못된 요청(파라미터 누락)
  403 : 접근이 거부된 상태(서버 접속 불가)
  404 : 찾을 수 없음(url 또는 forward 경로 잘못 됨)
  405 : 허용되지 않은 요청(GET, POST 잘못 입력)

  500 : 서버 내부 오류 - java , thymeleaf , DB , mybatis 등등 오류


[HttpMessageConverter]

 *  Spring에서 비동기 통신 시
 * - 전달되는 데이터의 자료형
 * - 응답하는 데이터의 자료형
 * 위 두가지 알맞은 형태로 가공(변환)해주는 객체
 
 * - 문자열, 숫자 <-> TEXT
 * - Map <-> JSON
 * - DTO <-> JSON
 
 * (참고)
 * HttpMessageConverter가 동작하기 위해서는
 * Jackson-data-bind 라이브러리가 필요한데
 * Spring Boot 모듈에 내장되어 있음
 * (Jackson : 자바에서 JSON 다루는 방법 제공하는 라이브러리)


[DOMContentLoaded]

 HTML 로딩(랜더링)이 끝난 후 수행
 


[Session]
- 데이터를 서버에서 관리
- 클라이언트가 서버에 최초 연결 시 생성

[Cookie란?]
-> 서버에서 읽은 게시글 번호ㅡㄹ 쿠키에 기록하여 클라이언트에게 전달
 *** - 클라이언트 측(브라우저)에서 관리하는 데이터(파일 형식)
 * 
 * - Cookie에는 만료기간, 데이터(key=value), 사용하는 사이트(주소)
 *  가 기록되어 있음
 *  
 *** - 클라이언트가 쿠키에 기록된 사이트로 요청으로 보낼 때
 *    요청에 쿠키가 담겨져서 서버로 넘어감
 *   
 * - Cookie의 생성, 수정, 삭제는 Server가 관리
 *   저장은 Client가 함
 *   
 * - Cookie는 HttpServletResponse를 이용해서 생성,
 *   클라이언트에게 전달(응답) 할 수 있다

  /* 이메일 저장 코드(Cookie)*/
        
  1. Cookie 객체 생성
  Cookie cookie = new Cookie("saveEmail", memberEmail);

  2. 만들어진 Cookie 사용될 경로(url)
  cookie.setPath("/"); // localHost 또는 현재 ip 이하 모든 주소

  3. Cookie가 유지되는 시간(수명) 설정
  if(saveEmail == null) { // 체크x
    cookie.setMaxAge(0); // 만들어지자 마자 만료 
                         // == 기존에 쿠키가 있으면 덮어씌우고 없어짐
      
  }else { // 체크 O
    cookie.setMaxAge(60 * 60 * 24 * 30); // 초단위로 작성
  }

  4. resp 객체에 추가해서 클라이언트에게 전달
  resp.addCookie(cookie);
 
  [ Calendar ]
   Calendar 객체 : 시간을 저장하는 객체
   Calendar.getInstance() : 현재 시간이 저장된 객체가 반환됨
  Calendar cal = Calendar.getInstance();


  [ Interceptor ]
  * - 요청/응답을 가로채는 객체 (Spring 지원)
  * Client <-> Filter <-> Dispatcher Servlet <-> Interceptor <-> Controller ....
  * - HandlerInterceptor 인터페이스 상속 필요
  * - 제공 메서드 중 필요한 메서드 오버라이딩
  * 
  * 1) proHandle() - 전처리
  * Dispathcher Servlet -> Controller
  * 사이에 요청/응답을 가로채서 수행
  * 
  * 2) postHandle() - 후처리
  *  Controller -> Dispathcher Servlet 
  *  사이에 요청/응답을 가로채서 수행
  * 
  * 3) afterCompletion() - forward된 뷰 완성 후
  *   View Resolver -> Dispatcher Servlet 사이 수행

  [ URI ]
  [Uniform Resource Identifier] : 통합 자원 식별자
   - 자원 이름(주소)만 봐도 무엇인지 구별할 수 있는 문자열
   ex)  /editBoard/1/insert