[ Framwork란? ]
- 개발시 필요한 기본구조와 뼈대를 제공하는 틀
- 코드의 재사용성을 증가 시키기 위해 일련의 클래스 묶음이나 뼈대, 틀을 라이브러리 형태로 제공함

[ Spring Framwork란? ]

- 동적인 웹 사이트를 개발하기 위한 여러 가지 서비스를 제공함


Thymeleaf (타임리프)
 th(Thymeleaf) 속성을 이용해 컨트롤러로 부터 전달 받은데이터를 이용해 동적 페이지를 만들 수 있음.
    Spring Boot에서는 JSP가 아닌 Thymeleaf 사용을 권장하고 있음

- ${key} : request scope에 세팅된 값 얻어와 출력


{ Model } : 데이터 전달용 객체(request)

{ @Controller }
 - 요청 / 응답 제어 하는 역할 명시 + Bean 등록

{ @Service }
 -  비지니스 로직을 처리하는 역할 명시 + Bean 등록(IOC)

{ @Autowired } 
 - 등록된 Bean 중에서 같은 타입의 Bean을 대입(의존성 주입 DI)

 { @Mapper }
 - Mybatis 제공 어노테이션
 - 해당 인터페이스를 상속 받은 클래스 자동 구현 + Bean 등록


 [ @ResponseBody ]
    응답 본문(ajax 코드)에 값 그대로 반환
   - 비동기 요청 코드(응답 본문)에
	    컨트롤러 반환 값을 그대로 전달하는 어노테이션

 [ @RequestParam ]
	 - 요청 시 제출된 데이터(쿼리스트링, input)를 얻어와
	    매개변수에 저장하는 어노테이션
	    
 [ @RequestMapping ]
	 - 요청 주소에 따라서
	  알맞은 컨트롤러 클래스/메서드에 연결하는 어노테이션

 [ @RequestBody ]
	- 비동기 요청 시 body에 담겨져 전달되는 데이터를
	  매개변수에 저장하는 어노테이션




 [ @SessionAttributes ]

 클래스 선언부 위에@SessionAttributes({"key"}) 추가
 -> key 값은 model에 추가된 key 값 "loginMember" 작성
    (request -> session)
			
    @SessionAttributes :
    Model 추가된 값 중 session scope로 올리고 싶은 값의
    key를 작성하는 어노테이션


 [ @SessionAttribute("key") ]
    - @SessionAttribute"s"를 통해 session에 올라간 값을 얻어오는 어노테이션
    
    - 사용방법
    1) 클래스 위에 @SessionAttribute"s" 어노테이션을 작성하고
    	해당 클래스에서 꺼내서 사용할 값의 key를 작성
    	--> 그럼 세션에서 값을 미리 얻어와 놓음
    
    2) 필요한 메서드 매개 변수에
    	@SessionAttribute("key")를 작성하면 해당
    	해당 key와 일치하는session 값을 얻어와서 대입


 [ @Transactional ] 
    -서비스 내 메서드 수행 중
     UnCheckedException 발생 시 rollback 수행
     아니면 메서드 종료 시 commit 수행


[상대 경로] 

    현재 위치를 기준으로 목표하는 곳을 찾아가는 
    주소/ 경로 작성하는 방법

    ex) 현재 위치 : /member/login --> login이 작성된 칸 기준

    목표 위치 : /member/logout
    상대 경로 : logout

    /----------------------------------------------
    현재 위치 : /member/login
    목표 위치 : /member
    상대 경로 : ../ (상위폴더, 상위 경로)

    ----------------------------------------------
    현재 위치 : /member/login
    목표 위치 : /member/signUp/idCheck
    상대 경로 : signUp/idCheck



    새 비밀번호가 알맞은 형태로 작성 되었는가 확인
     - 영어(대소문자 가리지 X) 1글자 이상
     - 숫자 1글자 이상
     - 특수문자 (! @ # _ -) 1글자 이상
    - 최소 6글자 최대 20글자
  
    /* 정규 표현식(regEx) */
     https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_expressions
  
     - 문자열에서 특정 문자 조합을 찾기 위한 패턴
  
     ex) 숫자가 3개 이상 작성된 문자열 조합 찾기
     "12abc" -> X
     "444"   -> O
     "1q2w3e" -> O
  
    
    /* [JS 정규 표현식 객체 생성 방법]
    1. /정규표현식/ -- 더 많이 씀
    2. new RegExp("정규표현식")
    */

    const lengthCheck = newPw.length >= 6 && newPw.length <= 20;
    const letterCheck = /[a-zA-Z]/.test(newPw); // 영어 알파벳 포함
    const numberCheck = /\d/.test(newPw); // 숫자 포함
    const specialCharCheck = /[!@#_-]/.test(newPw); // 특수문자 포함