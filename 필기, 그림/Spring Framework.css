[Framwork란? ]    /*    https://spring.io/    */ 참고
- 개발시 필요한 기본구조와 뼈대를 제공하는 틀
- 코드의 재사용성을 증가 시키기 위해 일련의 클래스 묶음이나 뼈대, 틀을 라이브러리 형태로 제공함

[Spring Framwork란? ]

-동적인 웹 사이트를 개발하기 위한 여러 가지 서비스를 제공함
-전자정부 표준 프레임워크(Spring MVC Project 기반 프레임워크)의 기반 기술로서 사용

- [API(Application Programming Interface)]
  서로 다른 소프트웨어 구성 요소 간의 상호 작용을 정의하는 규약
  API를 통해 서로 다른 프로그램들이 데이터를 주고받거나 기능을 호출하여 통신할 수 있음


[Spring Framwork의 주요 특징 ]

- { IOC (Inversion of Control)제어 반전} 
  객체의 생성부터 모든 생명주기의 관리까지 프레임워크가 주도함.
  클래스 간의 결합도를 낮추고 유지보수성을 향상시킬 수 있음

- { DI (Dependency Injection) 의존성 주입}
  개발자가 직접 객체를 생성하지 않고
  Spring Container가 만들어둔 객체를 필요한 위치에서 주입함.

- { POJO (Plain Old Java Object)}  J2EE, EJB
  일반적인 자바 객체(POJO)를 사용할 수 있도록 지원함.

- { AOP (Aspect Oriented Programming)관점 지향 프로그래밍}
  로깅, 보안, 트랜잭션 관리 등 공통적인 관심사를 분리하여 코드 중복을 줄이고 유지보수성을 향
  상 시키는 기능을 지원함.

- { Spring MVC } 
  MVC(Model, View, Controller) 디자인 패턴을 적용할 수 있는 어노테이션을 지원하고,
  IOC / DI를 이용해 의존 관계를 관리하여 개발자가 아닌 서버가 객체들을
  관리하는 웹 애플리케이션을 구축 할 수 있음.

- { PSA (Portable ServiceAbstraction) }
  스프링은 다른 여러 모듈을 사용함에 있어 별도의 추상화 레이어를 제공하여 특정 기술에 종속되
  지 않으면서 다양한 기술 스택을 쉽게 사용할 수 있음

  
  [Spring Boot]    /*    https://spring.io/    */ 참고
  
  {장점}
  - 다양한 Starter POM 파일을 제공해서 Maven, Gradle 등의 빌드 도구 구성, 라이브러리 관리를 간소화
  
  - Spring Starter를 이용해서 프로젝트를 생성 및 초기 설정을 간소화


  Annotation : @ 주석 (컴파일러가 인식하는 주석, 역할 지정)



  [Thymeleaf]   /*   https://www.thymeleaf.org/   */


  1. 템플릿 엔진
    템플릿 양식과 특정 데이터 모델에 따른 입력 자료를 합성하여 결과 문서(응답 화면)를 출력하는 것
    → 만들어둔 화면(html)에 데이터를 추가하여 하나의 html로 만들어서 응답
    (JSP도 템플릿 엔진)

  2. Thymeleaf (타임리프)
    웹 및 독립 실행형 환경 모두를 위한 최신 서버 측 Java 템플릿 엔진
    HTML 파일에서 th(Thymeleaf) 속성을 이용해 컨트롤러로 부터 전달 받은데이터를 이용해 동적 페이지를 만들 수 있음.
    Spring Boot에서는 JSP가 아닌 Thymeleaf 사용을 권장하고 있음


  4. Thymeleaf 문법(표현식)

    <html lang="en" xmlns:th="http://www.thymeleaf.org">
    th속성을 사용하기 위해 선언된 네임스페이스
    순수 HTML로만 이루어진 페이지의 경우, 선언하지 않아도 무관



  [ 1. 타임리프 ]

  {Spring EL(스프링 표현 언어)}

    - ${key} : request scope에 세팅된 값 얻어와 출력

    - th:text 속성
      -> 해당 속성이 작성된 태그의 content영역에 "속성값"을 출력

    * 타임리프 th 속성들은 해석이 완료된 후 사라지게된다!!!
      -> 응답화면을 브라우저 개발자 도구로 살펴보면
        th: 속성이 하나도 보이지 않는다!

      ex) <h4 th:text="${test1}">key값 test1에 세팅된 값</h4>


  -{단일 값 출력}

    th:block 태그
    - 타임리프에서 제공하는 유일한 태그
      (나머진 다 속성)

    - th 속성을 사용할만한 마땅한 태그가 없을 경우에 
      임시로 사용하는 목적으로 만들어진 태그
    
    - th:text 보단 조건문, 반복문에서 더 많이 사용함

    ex) 제품명 : <th:block th:text="${productName}"></th:block>


  -{복수(다수) 값 출력}

    - 지정된 index번째 요소를 얻어올 수 있음
    - 단, 작성법은 배열, 리스트 가리지 않고 모두 [index]

    ex) <li th:text="${fruitList[0]}"></li>


  -{저장된 요소 1개씩 출력 - th:each 이용}
    th:each="item : ${list}"  

    - 해당 HTML 요소를 list의 길이 만큼 반복

    - list에 저장된 요소를 순차접근하여 item에 저장

    - 해당 코드가 작성된 HTML요소 내부에서 item 사용 가능

    ex) <th:block th:each="fruit : ${fruitList}">
          <li th:text="${fruit}"></li>
        </th:block>


  -{th:object 와 *{필드명} 사용하기}
 
    *{key} : 선택 변수, 객체에 포함된 필드를 출력
    
    th:object 속성 : 작성된 태그 내에서
      지정된 객체의 필드를 쉽게 접근하게 하는 속성

    ex)
    <ul th:object="${std}">
      <li th:text="*{studentNo}">학번</li>
      <li th:text="*{name}">이름</li>
      <li th:text="*{age}">나이</li>
    </ul>

  /* ------------------------------------------------------------- */

  -{${param.key} : 제출된 파라미터 얻어오기}

    | 내용 | : 내용 그대로를 출력

    ex)
    <!-- 제출된 이름 : 홍길동 -->
    <h4 th:text="|제출된 이름 : ${param.inputName}|"></h4>

  
  -{th:text vs th:utext 비교}

    th:text = "속성값"
    - 해당 태그에 "속성값"을 내용으로 출력
    - 단, html 태그, 특수문자 해석 X (innerText)

    th:utext = "속성값"
    - 해당 태그에 "속성값"을 내용으로 출력
    - 단, html 태그, 특수문자 해석 O (innerHTML)


  -{th:text / th:utext를 대체하는 특수기호 (괄호)}
  
      th:text  == [[...]]
      th:utext == [(...)]


  -{링크(URL) 조합에 사용되는 Spring EL @{}}

    <a href="/example/ex3/test?key=aaa&query=bbb">
    /example/ex3/test 주소 요청</a>
    - 주소에 쿼리스트링으로 key=aaa, query=bbb 서버에 값 전달

    <a th:href="@{/example/ex3/test(key=${key}, 
    query=${query}), 
    boardNo=${boardNo} }">

   -  Spring EL의 @{} 를 이용해 쿼리스트링 자동 완성
    </a>


  [PathVariable]
    
    - 주소(URL, 경로) 중 일부분을 변수 값 처럼 사용
    
    ex)
    <a href="/example/ex3/1">1번</a>
    <a th:href="@{/example/ex3/{abc}(abc=${boardNo}) }">100번</a>


  -{th:if / th:unless}
  
    th:if = "조건식"
    - 조건식이 true인 경우에 수행

    (else 대신)
    th:unless = "조건식"
    - 조건식이 false인 경우에 수행

    ex)
    <th:block th:if= "${std == null}">
      <h3>std 없음</h3>
    </th:block>

    <th:block th:unless= "${std == null}">
      <h3 th:text="${std}">std.toString() 출력</h3>
    </th:block>


  -{th:switch / th:case}

    ex)
    <th:block th:switch="${num}">
    
      /* ${num} 값이 100인 경우 */
      <p th:case="100">AAAAAAA</p>
      <p th:case="200">BBBBBBB</p>

      /*  100, 200이 아닌 나머지 모든 경우 
        th:case="*" 은 마지막에만 작성 가능!!
       */
      <p th:case="*">CCCCCCC</p>
    </th:block>


  {삼항 연산자}
  
    
    -{(조건식 ?  true인 경우 : false인 경우)}
    
    ex)
    <h4 th:text="${std.age == 5} ? '5살 입니다' : '5살 아님!!' "></h4>
    <h4 th:text="${std.name == '맹구'} ? '맹구 입니다' : '맹구 아님!!' "></h4>
  
  
  -{Elvis 연산자( ?: )}

      [작성법]
      값 ?: 값이 없을 때
  
      - 값이 존재하는 경우 -> 값 출력
      - 값이 존재하지 않는 경우 -> 값이 없을 때 출력
      
      ex)
      /* true 부분 생략 */
      <h4 th:text="${std}    ?: '학생없음' "></h4>
      <h4 th:text="${member} ?: '회원없음' "></h4>

  
  -{No-Operation 연산자 (값 ?: _ )}
  
      - 값이 존재하지 않을 경우
        태그 사이에 작성된 내용(content 영역)을 
        출력하는 연산자

      ex)
      <h4 th:text="${std}    ?: _">std 정보 출력</h4>
      <h4 th:text="${member} ?: _">member 없음</h4> 


  
  -{th:inline = "javascript"}

      - script 태그에 작성한느 속성
  
      - 타임리프 문법으로 출력된 내용/값을
    **  JS에 알맞은 타입으로 변환하는 속성 **
     
    
      <!-- 
        ** Natural Template **
    
        const temp =  /*타임리프 구문*/  html단독실행값;
    
        - 해당 html이 forward되어 응답용으로 사용 될 때
         -> /*타임리프 구문*/  해석되서 적용
    
        - 해당 html이 local 환경에서 단독 실행 되었을 때
         -> html단독실행값  해석되서 적용
    
      -->
    
      ex)
      <script th:inline="javascript">
    
        /*  String 타입
         -> JS 문자열로 인식하도록 '' ,"" 붙이기 */
        const message = /*[[ ${message} ]]*/ "메시지";
    
        /* int 타입 -> JS에서 number로 인식하도록 따옴표 X */
        const num     = /*[[ ${num} ]]*/ 11111;
    
        /*  std는 Student타입의 객체
         --> JS 객체로 바꾸기 위한 가공 처리가 필요.. */
        const std     = /*[[${std}]]*/ {"name" : "홍길동"};
      </script>

  
  -{th:classappend 속성}

    - 클래스 속성 값을 추가하는 tyhmeleaf 속성

    - th:classappend 작성 시 모두 소문자!!

    <!-- class="a b"로 추가됨 -->
    <h4 class="a" th:classappend="b"></h4>

    <h4 th:classappend="${num} > 90000 ? green : red">결과</h4>


  - {안전 탐색 연산자 ( ${객체.필드} )}

    객체가 null인지 판단 후
    null이 아닌 경우에만 필드 값을 얻어와 출력

    -> NullPointException 방지


  -{${#numbers.sequence(시작, 끝 [,step])} }

    - 시작 부터 끝까지 step만큼 증가하는 숫자로 이루어진
    숫자 배열을 만드는 구문

  ex) ${#numbers.sequence(1, 5)}
    => {1,2,3,4,5} 기본 1씩 증가

  ex) ${#numbers.sequence(1, 5, 2)}
    => {1, 3, 5} 2씩 증가

    [왜 사용할까?]
    - 타임리프의 반복문(th:each)은
    향상된 for문 형식으로 원하는 횟수 만큼의 불가능
    이를 가능하게 만들때 사용!!!



 [ 설정 ]
  
  General show heap 체크
          > workspace > refresh using 체크

  devstyle > user the startup 해제

  xml > download 체크

  formatter > java > formatter > edit > indentation -tap :2
                                      >상단 제목 -tap2 추가

  [프로젝트 생성]

  New → Spring Boot → Spring Starter Project
  
  [group][artifact]
  edu.kh.demo


  Spring
  Spring boot devtools
  lombok
  thymeleaf
  Spring configuration Processer 검색 체크